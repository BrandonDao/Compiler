# Grammar Definition
# Terminals are either literal strings (in quotes) or regex (REGEX ...)
# Use the special keyword "empty" to indicate an empty/epsilon rule
# Comments start with "#" and cannot go on the same line as a rule

# must be the first line
entrypoint: Program;

# --- Terminals ---
id              : REGEX [A-Za-z][A-Za-z0-9]*;
intLiteral      : REGEX [0-9]+;
boolLiteral     : "true" | "false";

# --- Nonterminals ---

# Top-level structure
Program         : TopLevelList;
TopLevelList    : TopLevel TopLevelList
                | empty
                ;
TopLevel        : VarDefStatement
                ;

# Types
Type            : primitiveType | id;
ReturnType      : "void" | Type;
primitiveType   : "int8" | "int16" | "int32" | "int64" | "bool";

# Expressions
Expr            : BoolExpr
                | IntExpr
                ;
BoolExpr        : EqualityExpr BoolExprRest
                ;
EqualityExpr    : ValueExpr "==" ValueExpr
                | ValueExpr
                ;
BoolExprRest    : "|" BoolTerm BoolExprRest
                | empty
                ;
ValueExpr       : IntExpr
                | BoolTerm
                | "(" BoolExpr ")"
                ;
BoolTerm        : BoolFactor BoolTermRest ;
BoolTermRest    : "&" BoolFactor BoolTermRest
                | empty
                ;
BoolFactor      : "(" BoolExpr ")"
                | boolLiteral
                | IntExpr "<" IntExpr
                | IntExpr ">" IntExpr
                | IntExpr "<=" IntExpr
                | IntExpr ">=" IntExpr
                | FunctionCall
                | id
                ;
IntExpr         : IntSecondary IntExprRest ;
IntLowOp        : "+" | "-";
IntExprRest     : IntLowOp IntSecondary IntExprRest
                | empty
                ;
IntSecondary    : IntBase IntSecondaryRest ;
IntHighOp       : "*" | "/" | "%";
IntSecondaryRest: IntHighOp IntBase IntSecondaryRest
                | empty
                ;
IntBase         : "(" IntExpr ")"
                | intLiteral
                | FunctionCall
                | id
                ;


# --- Variables ---
VarDefStatement     : Type id "=" Expr ";" ;
