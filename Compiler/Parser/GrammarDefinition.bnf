# Grammar Definition
# Use the special keyword "EMPTY" to indicate an EMPTY/epsilon rule
# Comments start with "#"
# Terminals are prefixed with _. Here is a full list of supported terminals:
# _Int8 _Int16 _Int32 _Int64
# _Bool
# _Void
# _Let _Func _While _Namespace
# _SmallArrow
# _OpEquality _OpOr _OpAnd _OpNegate _OpAdd
# _OpMultiply _OpDivide _OpMod
# _OpAssign
# _LiteralInt _LiteralBool
# _Whitespace
# _Semicolon _Colon _Comma _Dot
# _OpenBrace _CloseBrace _OpenParen _CloseParen _OpenSquareBracket _CloseSquareBracket _OpenAngleBracket _CloseAngleBracket
# _Id

Literal             : _LiteralInt | _LiteralBool;
PrimitiveType       : _Int8 | _Int16 | _Int32 | _Int32 | _Int64 | _Bool;
Type                : PrimitiveType | _Id;

QualifiedName       : _Id QualifiedNameRest;
QualifiedNameRest   : _Dot _Id QualifiedNameRest | EMPTY;

# Top-level structure
NamespaceDef        : _Namespace QualifiedName HighLevelBlock;

HighLevelBlock      : _OpenBrace HighLevelBlockItem HighLevelBlockRest _CloseBrace;
HighLevelBlockRest  : HighLevelBlock | EMPTY;
HighLevelBlockItem  : NamespaceDef | FunctionDef | VarDefStatement;

StatementBlock      : _OpenBrace StatementBlockItem StatementBlockRest _CloseBrace;
StatementBlockRest  : StatementBlock | EMPTY;
StatementBlockItem  : VarDefStatement | AssignmentOrFuncCallStatement | WhileStatement | StatementBlock | EmptyStatement;
EmptyStatement      : _Semicolon;

# Variables
VarNameType         : _Id _Colon Type;
VarDefStatement     : _Let VarNameType _OpAssign ValueExpr _Semicolon;

# Expressions
ValueExpr       : HighExpr LowExprRest;
HighExpr        : ValueTerm HighExprRest;
HighExprRest    : HighExprOp HighExpr | EMPTY;
LowExprRest     : LowExprOp ValueExpr | EMPTY;

LowExprOp       : _OpAdd | _OpNegate | _OpOr | _OpAnd | _OpEquality;
HighExprOp      : _OpMultiply | _OpDivide | _OpMod;

ValueTerm           : _OpNot ValueTerm
                    | _OpenParen ValueExpr _CloseParen
                    | _LiteralBool
                    | _LiteralInt
                    | IdOrFuncCall
                    ;
IdOrFuncCall        : _Id IdOrFuncCallRest; # Need to parse as either ID or FuncCallExpr depending on production
IdOrFuncCallRest    : ParamList | EMPTY;

# Functions
FunctionDef     : _Func _Id  ParamList ReturnTypeDef StatementBlock;
ParamList       : _OpenParen ParamListStart _CloseParen
ParamListStart  : VarNameType ParamListRest | EMPTY*; # If EMPTY: Assumed to be []
ParamListRest   : _Comma ParamListStart     | EMPTY;
ReturnTypeDef   : _SmallArrow ReturnType    | EMPTY*; # If EMPTY: Assumed to be void
ReturnType      : _Void | Type;

FuncCallExpr        : _Id ArgumentList;
ArgumentList        : _OpenParen ArgumentListStart _CloseParen;
ArgumentListStart   : Argument ArgumentListRest | EMPTY;
ArgumentListRest    : _Comma Argument ArgumentListRest | EMPTY;
Argument            : ValueExpr;


# Statements 
AssignmentOrFuncCallStatement       : _Id AssignmentOrFuncCallStatementRest _Semicolon;
AssignmentOrFuncCallStatementRest   : ArgumentList | _OpAssign ValueExpr;

# Control Statements
WhileStatement  : _While ValueExpr StatementBlock;