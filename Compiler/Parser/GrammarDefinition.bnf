# Grammar Definition
# Use the special keyword "EMPTY" to indicate an EMPTY/epsilon rule
# Comments start with "#" and cannot go on the same line as a rule
# Terminals are prefixed with _. Here is a full list of supported terminals:
# _Int8
# _Int16
# _Int32
# _Int64
# _Bool
# _OpEquality
# _OpOr
# _OpAnd
# _OpNegate
# _OpAdd
# _OpMultiply
# _OpDivide
# _OpMod
# _OpAssign
# _LiteralInt
# _LiteralBool
# _Whitespace
# _Semicolon
# _Comma
# _OpenBrace
# _CloseBrace
# _OpenParen
# _CloseParen
# _OpenSquareBracket
# _CloseSquareBracket
# _OpenAngleBracket
# _CloseAngleBracket
# _Id

# Must exist in the file somewhere
ENTRYPOINT: Program;

PrimitiveType   : _Int8 | _Int16 | _Int32 | _Int32 | _Int64 | _Bool;

# Top-level structure
Program         : TopLevelList;
TopLevelList    : TopLevel TopLevelList
                | EMPTY
                ;
TopLevel        : VarDefStatement
                ;

# Types
Type            : PrimitiveType | _Id;

# Expressions
Expr            : BoolExpr
                | IntExpr
                ;
BoolExpr        : EqualityExpr BoolExprRest
                ;
EqualityExpr    : ValueExpr _OpEquality ValueExpr
                | ValueExpr
                ;
BoolExprRest    : _OpOr BoolTerm BoolExprRest
                | EMPTY
                ;
ValueExpr       : IntExpr
                | BoolTerm
                | _OpenParen BoolExpr _CloseParen
                ;
BoolTerm        : BoolFactor BoolTermRest ;
BoolTermRest    : _OpAnd BoolFactor BoolTermRest
                | EMPTY
                ;
BoolFactor      : _OpenParen BoolExpr _CloseParen
                | _LiteralBool
#                | IntExpr "<" IntExpr
#                | IntExpr ">" IntExpr
#                | IntExpr "<=" IntExpr
#                | IntExpr ">=" IntExpr
                | _Id
                ;
IntExpr         : IntSecondary IntExprRest ;
IntLowOp        : _OpAdd | _OpNegate;
IntExprRest     : IntLowOp IntSecondary IntExprRest
                | EMPTY
                ;
IntSecondary    : IntBase IntSecondaryRest ;
IntHighOp       : _OpMultiply | _OpDivide | _OpMod;
IntSecondaryRest: IntHighOp IntBase IntSecondaryRest
                | EMPTY
                ;
IntBase         : _OpenParen IntExpr _CloseParen
                | _LiteralInt
                | _Id
                ;

#FIRST(IntExpr):             { _OpenParen, _LiteralInt, _Id }
#FIRST(IntLowOp):            { _OpAdd, _OpNegate }
#FIRST(IntExprRest):         { _OpAdd, _OpNegate }
#FIRST(IntSecondary):        { _OpenParen, _LiteralInt, _Id }
#FIRST(IntHighOp):           { _OpMultiply, _OpDivide, _OpMod }
#FIRST(IntSecondaryRest):    { _OpMultiply, _OpDivide, _OpMod }
#FIRST(IntBase):             { _OpenParen, _LiteralInt, _Id }

# --- Variables ---
VarDefStatement     : Type _Id _OpAssign Expr _Semicolon ;
